name: Build & Publish UniFi API Browser to GHCR

on:
  push:
    branches: [main, master]
    paths:
      - "Dockerfile"
      - "files/**"
      - "**/*.sh"
      - ".github/workflows/**"
  # Weekly rebuild to pick up upstream changes automatically
  schedule:
    - cron: "0 6 * * 1" # Mondays 06:00 UTC
  workflow_dispatch: {}

# GITHUB_TOKEN must have permission to push to GHCR
permissions:
  contents: read
  packages: write

concurrency:
  group: ghcr-unifibrowser-${{ github.ref }}
  cancel-in-progress: false

env:
  IMAGE_NAME: unifibrowser

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute owner (lowercase for GHCR)
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Set up QEMU (multi-arch emulation)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata (labels & tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}
          # Tags:
          # - latest on main/master pushes & scheduled runs
          # - sha for traceability
          # - semver tag if you push a Git tag
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'schedule' }}
            type=sha
            type=ref,event=tag

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          # Important: ensure the Dockerfile's `git clone` of upstream is *not* cached.
          no-cache: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
